<?xml version="1.0"?>
<robot
  xmlns:controller="http://playerstage.sourceforge.net/gazebo/xmlschema/#controller"
  xmlns:interface="http://playerstage.sourceforge.net/gazebo/xmlschema/#interface"
  xmlns:xacro="http://ros.org/wiki/xacro"
  name="simplebot">

  <xacro:property name="M_PI" value="3.1415926535897931" />

  <xacro:property name="wheel_width" value="0.01" />
  <!-- This is the wheel radius for the robot height, the one for the odometry is in volksbot_node.cpp  -->
  <xacro:property name="wheel_radius" value="0.0245" />
  <xacro:property name="axis_length" value="0.160" />
  <xacro:property name="wheel_x_offset" value="0.035" />
  <xacro:property name="wheel_z_offset" value="-0.027" />
  <xacro:property name="turning_adaptation" value="0.95" />

  <xacro:property name="base_mass" value="1.7" />
  <xacro:property name="wheel_mass" value="0.02" />

  <xacro:property name="base_link_length" value="0.18"/>
  <xacro:property name="base_link_width" value="0.18"/>
  <xacro:property name="base_link_height" value="0.09"/>

  <link name="base_link">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <mesh filename="package://simplebot_driver/model/simplebot_base.stl"/>
      </geometry>
      <material name="grey" >
        <color rgba="0.8 0.8 0.8 1" />
      </material>
    </visual>

    <collision>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <mesh filename="package://simplebot_driver/model/simplebot_base.stl"/>
      </geometry>
    </collision>

    <inertial>
      <mass value="${base_mass}" />
      <origin xyz="0 0 0" />
      <inertia ixx="${0.0833333 * base_mass * (base_link_width*base_link_width + base_link_height*base_link_height)}" ixy="0.0" ixz="0.0"
        iyy="${0.0833333 * base_mass * (base_link_length*base_link_length + base_link_height*base_link_height)}" iyz="0.0"
        izz="${0.0833333 * base_mass * (base_link_length*base_link_length + base_link_width*base_link_width)}" />
    </inertial>
  </link>

  <xacro:macro name="volksbot_wheel" params="name xyz rotate_visual friction">
    <link name="${name}_wheel_link">
      <visual>
        <origin xyz="0 0 0" rpy="0 0 ${rotate_visual * M_PI}" />
        <geometry>
          <mesh filename="package://simplebot_driver/model/simplebot_wheel.stl"/>
        </geometry>
        <material name="blackish">
          <color rgba="0.2 0.2 0.2 1"/>
        </material>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="${M_PI/2} 0 0" />
        <geometry>
          <mesh filename="package://simplebot_driver/model/simplebot_wheel.stl"/>
        </geometry>
      </collision>
      <inertial>
        <mass value="${wheel_mass}" />
        <origin xyz="0 0 0" />
        <inertia ixx="${0.0833333 * wheel_mass * (3 * wheel_radius * wheel_radius + wheel_width * wheel_width)}" ixy="0.0" ixz="0.0"
          iyy="${0.0833333 * wheel_mass * (3 * wheel_radius * wheel_radius + wheel_width * wheel_width)}" iyz="0.0"
          izz="${0.5 * wheel_mass * wheel_radius * wheel_radius}" />
      </inertial>
    </link>

    <joint name="${name}_wheel_joint" type="continuous">
      <origin xyz="${xyz}" rpy="0 0 0" />
      <parent link="base_link"/>
      <child link="${name}_wheel_link"/>
      <axis xyz="0 1 0"/>
    </joint>
  </xacro:macro>

  <xacro:volksbot_wheel name="left_front" xyz="${wheel_x_offset} ${axis_length/2} ${wheel_z_offset}" rotate_visual="1" friction="1.0" />
  <xacro:volksbot_wheel name="left_rear" xyz="${-wheel_x_offset} ${axis_length/2} ${wheel_z_offset}" rotate_visual="1" friction="1.0" />
  <xacro:volksbot_wheel name="right_front" xyz="${wheel_x_offset} ${-axis_length/2} ${wheel_z_offset}" rotate_visual="0" friction="1.0" />
  <xacro:volksbot_wheel name="right_rear" xyz="${-wheel_x_offset} ${-axis_length/2} ${wheel_z_offset}" rotate_visual="0" friction="1.0" />


  <!-- base_footprint is a fictitious link(frame) that is on the ground right below base_link origin,
       navigation stack depends on this frame -->
  <link name="base_footprint"/>

  <joint name="base_footprint_joint" type="fixed">
    <origin xyz="0 0 ${wheel_radius -  wheel_z_offset}" rpy="0 0 0" />
    <parent link="base_footprint"/>
    <child link="base_link" />
  </joint>

  <link name="base_top" />

  <joint name="base_top_joint" type="fixed">
    <origin xyz="0 0 ${base_link_height / 2.0}" rpy="0 0 0" />
    <parent link="base_link" />
    <child link="base_top"/>
  </joint>
</robot>